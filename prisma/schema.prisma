generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Church {
  id         String     @id @default(cuid())
  name       String     @unique
  phone      String?
  email      String?
  ministries Ministry[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Ministry {
  id             String            @id @default(cuid())
  name           String
  church         Church?           @relation(fields: [churchId], references: [id])
  churchId       String?
  churchName     String?
  churchPhone    String?
  churchEmail    String?
  pastorName     String?
  pastorPhone    String?
  pastorEmail    String?
  cep            String?
  rua            String?
  numero         String?
  complemento    String?
  bairro         String?
  municipio      String?
  estado         String?
  masters        User[]            @relation("MasterMinistry")
  leaders        User[]            @relation("MinistryLeaders")
  members        Member[]
  smallGroups    SmallGroup[]
  finances       Finance[]
  events         Event[]
  features       MinistryFeature[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  assistantChats AssistantChat[]
  status         String            @default("ATIVO")
  meetingNotes   SmallGroupMeetingNote[]
  visitors       SmallGroupVisitor[]
  materialApoio  MaterialApoio[]
}

model User {
  id                String    @id @default(cuid())
  name              String
  email             String    @unique
  password          String
  role              Role?
  ministry          Ministry? @relation("MinistryLeaders", fields: [ministryId], references: [id])
  ministryId        String?
  masterMinistry    Ministry? @relation("MasterMinistry", fields: [masterMinistryId], references: [id])
  masterMinistryId  String?
  permissions    UserPermission[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  assistantChats AssistantChat[]
  isActive       Boolean          @default(true)
  dataIngresso   DateTime?
  celular        String?
  cep            String?
  rua            String?
  numero         String?
  complemento    String?
  bairro         String?
  municipio      String?
  estado         String?
  sexo           String?
  estadoCivil    String?
  dataNascimento DateTime?
  churchId       String?
  observacoesCriadas MemberObservacao[] @relation("UserObservacoes")
  finances       Finance[]
  smallGroupLeaderships SmallGroupLeader[]
  smallGroupNotes SmallGroupMeetingNote[]
  materialApoio  MaterialApoio[]
  @@unique([id, masterMinistryId])
}

model UserPermission {
  id        String          @id @default(cuid())
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  feature   Feature         @relation(fields: [featureId], references: [id])
  featureId String
  level     PermissionLevel
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([userId, featureId])
}

model Feature {
  id          String            @id @default(cuid())
  name        String
  description String?
  isActive    Boolean           @default(true)
  permissions UserPermission[]
  ministries  MinistryFeature[]
}

model MinistryFeature {
  id         String   @id @default(cuid())
  ministry   Ministry @relation(fields: [ministryId], references: [id])
  ministryId String
  feature    Feature  @relation(fields: [featureId], references: [id])
  featureId  String
  isEnabled  Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([ministryId, featureId])
}

model AssistantChat {
  id         String             @id @default(cuid())
  user       User               @relation(fields: [userId], references: [id])
  userId     String
  ministry   Ministry?          @relation(fields: [ministryId], references: [id])
  ministryId String?
  messages   AssistantMessage[]
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
}

model AssistantMessage {
  id        String         @id @default(cuid())
  chat      AssistantChat  @relation(fields: [chatId], references: [id])
  chatId    String
  content   String
  role      MessageRole
  context   MessageContext
  createdAt DateTime       @default(now())
}

model Member {
  id          String       @id @default(cuid())
  name        String
  email       String?
  phone       String?
  ministry    Ministry     @relation(fields: [ministryId], references: [id])
  ministryId  String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  dataNascimento DateTime?
  sexo           String?
  estadoCivil    String?
  cep            String?
  rua            String?
  numero         String?
  complemento    String?
  bairro         String?
  municipio      String?
  estado         String?
  batizado       Boolean?   @default(false)
  dataIngresso   DateTime?
  responsaveis   Responsavel[]
  irmaos         MemberIrmao[] @relation("MemberToIrmaos")
  irmaoDe        MemberIrmao[] @relation("IrmaoToMember")
  primos         MemberPrimo[] @relation("MemberToPrimos")
  primoDe        MemberPrimo[] @relation("PrimoToMember")
  observacoes    MemberObservacao[]
  status        String      @default("ATIVO")
  smallGroupMemberships SmallGroupMember[] @relation("MemberToSmallGroupMember")
  smallGroupAttendances SmallGroupAttendance[] @relation("MemberToSmallGroupAttendance")
  invitedVisitors SmallGroupVisitor[]
  marcarBiblia MarcarBiblia[]
}

model MemberIrmao {
  id         String  @id @default(cuid())
  member     Member  @relation("MemberToIrmaos", fields: [memberId], references: [id])
  memberId   String
  irmao      Member  @relation("IrmaoToMember", fields: [irmaoId], references: [id])
  irmaoId    String
}

model MemberPrimo {
  id         String  @id @default(cuid())
  member     Member  @relation("MemberToPrimos", fields: [memberId], references: [id])
  memberId   String
  primo      Member  @relation("PrimoToMember", fields: [primoId], references: [id])
  primoId    String
}

model SmallGroup {
  id         String   @id @default(cuid())
  name       String
  ministry   Ministry @relation(fields: [ministryId], references: [id])
  ministryId String
  region     String?
  address    String?
  dayOfWeek  String?
  time       String?
  endTime    String?
  status     String  @default("ATIVO")
  description String? @db.Text // Descrição longa
  meetings   SmallGroupMeeting[]
  leaders    SmallGroupLeader[]
  members    SmallGroupMember[] // relação com SmallGroupMember
  visitors   SmallGroupVisitor[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  frequency  String? // Frequência do grupo: DIARIO, SEMANAL, QUINZENAL, MENSAL
  startDate  DateTime? // Data de início do grupo
  hostName   String?   // Nome do anfitrião
  hostPhone  String?   // Celular do anfitrião
  cep        String?
  rua        String?
  numero     String?
  complemento String?
  bairro     String?
  municipio  String?
  estado     String?
  // Configurações de janela de tempo para registro de presença
  attendanceWindowBefore Int @default(60) // Minutos antes do início da reunião
  attendanceWindowAfter  Int @default(1440) // Minutos após o término da reunião (24h)
  meetingNotes   SmallGroupMeetingNote[]
  marcarBiblia   MarcarBiblia[]
  materialApoio  MaterialApoio[]
}

model SmallGroupLeader {
  id           String      @id @default(cuid())
  smallGroup   SmallGroup  @relation(fields: [smallGroupId], references: [id], onDelete: Cascade)
  smallGroupId String
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  role         String      // Ex: 'LIDER_PRINCIPAL', 'CO_LIDER', 'AUXILIAR'
  since        DateTime    @default(now())
  until        DateTime?
  reason       String?     // Motivo da mudança de role
}

model SmallGroupMember {
  id            String   @id @default(cuid())
  member        Member   @relation("MemberToSmallGroupMember", fields: [memberId], references: [id])
  memberId      String
  smallGroup    SmallGroup @relation(fields: [smallGroupId], references: [id], onDelete: Cascade)
  smallGroupId  String
  role          String    // Ex: 'MEMBRO', 'LIDER', 'ANFITRIAO'
  joinedAt      DateTime  @default(now())
  leftAt        DateTime?
  status        String    @default("ATIVO") // ATIVO, INATIVO, TEMPORARIO, AFASTADO
  statusChangedAt DateTime? // Data da mudança de status
  statusChangeReason String? // Motivo da mudança de status
  requiresApproval Boolean @default(false) // Se a mudança requer aprovação
}

model SmallGroupAttendance {
  id            String   @id @default(cuid())
  meeting       SmallGroupMeeting @relation(fields: [meetingId], references: [id])
  meetingId     String
  member        Member   @relation("MemberToSmallGroupAttendance", fields: [memberId], references: [id])
  memberId      String
  present       Boolean  // true = presente, false = ausente
  notes         String?
}

model SmallGroupMeeting {
  id            String   @id @default(cuid())
  smallGroup    SmallGroup @relation(fields: [smallGroupId], references: [id], onDelete: Cascade)
  smallGroupId  String
  date          DateTime
  startTime     String?  // Horário de início da reunião
  endTime       String?  // Horário de término da reunião
  location      String?
  type          String   // Ex: 'PG', 'ENCONTRAO', 'RETIRO'
  theme         String?
  status        String   @default("AGENDADA") // AGENDADA, EM_ANDAMENTO, FINALIZADA, CANCELADA
  cancelReason  String?  // Motivo do cancelamento
  notes         SmallGroupMeetingNote[]
  attendances   SmallGroupAttendance[]
  visitors      SmallGroupVisitor[]
  prayerRequests SmallGroupPrayerRequest[]
  marcarBiblia  MarcarBiblia[]
  materialApoio MaterialApoio[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SmallGroupVisitor {
  id            String   @id @default(cuid())
  meeting       SmallGroupMeeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  meetingId     String
  smallGroup    SmallGroup @relation(fields: [smallGroupId], references: [id], onDelete: Cascade)
  smallGroupId  String
  ministry      Ministry @relation(fields: [ministryId], references: [id])
  ministryId    String
  name          String
  phone         String?
  email         String?
  invitedBy     Member? @relation(fields: [invitedById], references: [id])
  invitedById   String?
  notes         String?
  // Campos para futura migração para membro
  dataNascimento DateTime?
  sexo           String?
  estadoCivil    String?
  cep            String?
  rua            String?
  numero         String?
  complemento    String?
  bairro         String?
  municipio      String?
  estado         String?
  // Controle de migração
  migratedToMember Boolean @default(false)
  migratedMemberId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SmallGroupPrayerRequest {
  id            String   @id @default(cuid())
  meeting       SmallGroupMeeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  meetingId     String
  requesterName String?
  request       String
  answered      Boolean @default(false)
  notes         String?
}

model SmallGroupMeetingNote {
  id           String            @id @default(cuid())
  title        String
  content      String
  meeting      SmallGroupMeeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  meetingId    String
  smallGroup   SmallGroup        @relation(fields: [smallGroupId], references: [id], onDelete: Cascade)
  smallGroupId String
  ministry     Ministry          @relation(fields: [ministryId], references: [id])
  ministryId   String
  author       User?             @relation(fields: [authorId], references: [id])
  authorId     String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model Finance {
  id            String      @id @default(cuid())
  title         String
  description   String
  amount        Float
  type          FinanceType
  date          DateTime
  category      String?
  ministry      Ministry    @relation(fields: [ministryId], references: [id])
  ministryId    String
  responsavel   User        @relation(fields: [responsavelId], references: [id])
  responsavelId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime
  ministry    Ministry @relation(fields: [ministryId], references: [id])
  ministryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Responsavel {
  id        String   @id @default(cuid())
  nome      String
  celular   String
  tipo      String
  member    Member   @relation(fields: [memberId], references: [id])
  memberId  String
}

model MemberObservacao {
  id         String   @id @default(uuid())
  member     Member   @relation(fields: [memberId], references: [id])
  memberId   String
  autor      User     @relation("UserObservacoes", fields: [autorId], references: [id])
  autorId    String
  texto      String
  categoria  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model MarcarBiblia {
  id             String        @id @default(cuid())
  member         Member        @relation(fields: [memberId], references: [id])
  memberId       String
  meeting        SmallGroupMeeting @relation(fields: [meetingId], references: [id])
  meetingId      String
  smallGroup     SmallGroup    @relation(fields: [smallGroupId], references: [id])
  smallGroupId   String
  broughtBible   Boolean
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@unique([meetingId, memberId])
}

model MaterialApoio {
  id             String       @id @default(cuid())
  nome           String
  arquivoUrl     String
  usuario        User         @relation(fields: [usuarioId], references: [id])
  usuarioId      String
  ministry       Ministry?    @relation(fields: [ministerioId], references: [id])
  ministerioId   String?
  smallGroup     SmallGroup?  @relation(fields: [smallGroupId], references: [id])
  smallGroupId   String?
  meeting        SmallGroupMeeting @relation(fields: [meetingId], references: [id])
  meetingId      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum Role {
  ADMIN
  MASTER
  LEADER
}

enum PermissionLevel {
  NONE
  READ
  WRITE
  FULL
}

enum MessageRole {
  USER
  ASSISTANT
}

enum MessageContext {
  SYSTEM
  MINISTRY
}

enum FinanceType {
  ENTRADA
  SAIDA
}
