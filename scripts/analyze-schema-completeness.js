const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// Constantes do sistema (copiadas do activity-logger.ts)
const ACTIVITY_TYPES = {
  MEMBER: 'MEMBRO',
  SMALL_GROUP: 'PEQUENO_GRUPO',
  EVENT: 'EVENTO',
  USER: 'USUARIO',
  MINISTRY: 'MINISTERIO',
  FINANCE: 'FINANCEIRO',
  MATERIAL: 'MATERIAL',
  OBSERVATION: 'OBSERVACAO',
  MEETING: 'REUNIAO',
  VISITOR: 'VISITANTE',
  PARTICIPANT: 'PARTICIPANTE',
  REGISTRATION: 'INSCRICAO'
};

const ACTIVITY_ACTIONS = {
  CREATE: 'CRIAR',
  UPDATE: 'ATUALIZAR',
  DELETE: 'EXCLUIR',
  VIEW: 'VISUALIZAR',
  LOGIN: 'LOGIN',
  LOGOUT: 'LOGOUT',
  EXPORT: 'EXPORTAR',
  IMPORT: 'IMPORTAR',
  APPROVE: 'APROVAR',
  REJECT: 'REJEITAR',
  CANCEL: 'CANCELAR',
  ACTIVATE: 'ATIVAR',
  DEACTIVATE: 'DESATIVAR'
};

async function analyzeSchemaCompleteness() {
  try {
    console.log('üîç Analisando completude do esquema Prisma para atividades...\n');

    // 1. Verificar estrutura atual do modelo Atividade
    console.log('üìã ESTRUTURA ATUAL DO MODELO ATIVIDADE:');
    console.log('=====================================');
    console.log('‚úÖ id (String, @id, @default(cuid()))');
    console.log('‚úÖ tipo (String) - Para categorizar o tipo de atividade');
    console.log('‚úÖ acao (String) - Para especificar a a√ß√£o realizada');
    console.log('‚úÖ descricao (String) - Descri√ß√£o da atividade');
    console.log('‚úÖ detalhes (String?, @db.Text) - Detalhes adicionais opcionais');
    console.log('‚úÖ entidadeId (String?) - ID da entidade relacionada');
    console.log('‚úÖ usuario (User?) - Rela√ß√£o com o usu√°rio que executou a a√ß√£o');
    console.log('‚úÖ usuarioId (String?) - ID do usu√°rio');
    console.log('‚úÖ ministry (Ministry?) - Rela√ß√£o com o minist√©rio');
    console.log('‚úÖ ministryId (String?) - ID do minist√©rio');
    console.log('‚úÖ createdAt (DateTime, @default(now())) - Data de cria√ß√£o');
    console.log('‚úÖ ip (String?) - Endere√ßo IP do usu√°rio');
    console.log('‚úÖ userAgent (String?, @db.Text) - User Agent do navegador');

    // 2. Verificar se h√° atividades no banco
    const atividadeCount = await prisma.atividade.count();
    console.log(`\nüìä ESTAT√çSTICAS ATUAIS:`);
    console.log(`   Total de atividades no banco: ${atividadeCount}`);

    if (atividadeCount > 0) {
      // Analisar tipos de atividades existentes
      const tiposExistentes = await prisma.atividade.groupBy({
        by: ['tipo'],
        _count: {
          tipo: true
        },
        orderBy: {
          _count: {
            tipo: 'desc'
          }
        }
      });

      console.log('\nüìà TIPOS DE ATIVIDADES EXISTENTES:');
      tiposExistentes.forEach(tipo => {
        const isStandard = Object.values(ACTIVITY_TYPES).includes(tipo.tipo);
        const status = isStandard ? '‚úÖ' : '‚ö†Ô∏è';
        console.log(`   ${status} ${tipo.tipo}: ${tipo._count.tipo} atividades`);
      });

      // Analisar a√ß√µes existentes
      const acoesExistentes = await prisma.atividade.groupBy({
        by: ['acao'],
        _count: {
          acao: true
        },
        orderBy: {
          _count: {
            acao: 'desc'
          }
        }
      });

      console.log('\nüéØ A√á√ïES EXISTENTES:');
      acoesExistentes.forEach(acao => {
        const isStandard = Object.values(ACTIVITY_ACTIONS).includes(acao.acao);
        const status = isStandard ? '‚úÖ' : '‚ö†Ô∏è';
        console.log(`   ${status} ${acao.acao}: ${acao._count.acao} atividades`);
      });
    }

    // 3. Verificar integridade referencial
    console.log('\nüîó VERIFICA√á√ÉO DE INTEGRIDADE REFERENCIAL:');
    console.log('==========================================');

    if (atividadeCount > 0) {
      // Verificar atividades com usu√°rios inexistentes
      const atividadesUsuarioInvalido = await prisma.atividade.count({
        where: {
          usuarioId: {
            not: null
          },
          usuario: null
        }
      });

      // Verificar atividades com minist√©rios inexistentes
      const atividadesMinisterioInvalido = await prisma.atividade.count({
        where: {
          ministryId: {
            not: null
          },
          ministry: null
        }
      });

      console.log(`   Atividades com usu√°rio inv√°lido: ${atividadesUsuarioInvalido}`);
      console.log(`   Atividades com minist√©rio inv√°lido: ${atividadesMinisterioInvalido}`);

      if (atividadesUsuarioInvalido === 0 && atividadesMinisterioInvalido === 0) {
        console.log('   ‚úÖ Integridade referencial OK');
      } else {
        console.log('   ‚ö†Ô∏è Problemas de integridade encontrados');
      }
    } else {
      console.log('   ‚ÑπÔ∏è Nenhuma atividade para verificar');
    }

    // 4. Recomenda√ß√µes
    console.log('\nüí° RECOMENDA√á√ïES:');
    console.log('=================');
    console.log('‚úÖ O modelo Atividade est√° bem estruturado e completo');
    console.log('‚úÖ Todos os campos necess√°rios est√£o presentes:');
    console.log('   - Identifica√ß√£o (id, tipo, acao)');
    console.log('   - Conte√∫do (descricao, detalhes)');
    console.log('   - Relacionamentos (usuarioId, ministryId, entidadeId)');
    console.log('   - Auditoria (createdAt, ip, userAgent)');
    
    console.log('\nüéØ CAMPOS OPCIONAIS ADEQUADOS:');
    console.log('   - detalhes: Para informa√ß√µes adicionais quando necess√°rio');
    console.log('   - entidadeId: Para referenciar entidades espec√≠ficas');
    console.log('   - usuarioId: Pode ser null para atividades do sistema');
    console.log('   - ministryId: Pode ser null para atividades globais');
    console.log('   - ip/userAgent: Para auditoria de seguran√ßa');

    console.log('\nüîß MELHORIAS SUGERIDAS:');
    console.log('   1. ‚úÖ Usar constantes padronizadas (ACTIVITY_TYPES/ACTIONS)');
    console.log('   2. ‚úÖ Implementar logging consistente em todas as APIs');
    console.log('   3. ‚úÖ Manter integridade referencial');
    console.log('   4. ‚ö†Ô∏è Considerar adicionar √≠ndices para performance:');
    console.log('      - @@index([tipo, createdAt])');
    console.log('      - @@index([usuarioId, createdAt])');
    console.log('      - @@index([ministryId, createdAt])');

    console.log('\n‚úÖ CONCLUS√ÉO: O esquema est√° adequado para o sistema de atividades!');

  } catch (error) {
    console.error('‚ùå Erro ao analisar esquema:', error);
  } finally {
    await prisma.$disconnect();
  }
}

analyzeSchemaCompleteness();