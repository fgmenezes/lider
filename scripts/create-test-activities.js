const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function createTestActivities() {
  try {
    console.log('üîç Verificando dados existentes...');

    // Verificar se o usu√°rio Felipe existe
    const felipe = await prisma.user.findUnique({
      where: { email: 'felipe@lider.com' },
      include: {
        masterMinistry: true,
        ministry: true
      }
    });

    if (!felipe) {
      console.log('‚ùå Usu√°rio Felipe n√£o encontrado. Execute o seed primeiro.');
      return;
    }

    console.log('‚úÖ Usu√°rio Felipe encontrado:', {
      id: felipe.id,
      name: felipe.name,
      email: felipe.email,
      masterMinistry: felipe.masterMinistry?.name,
      ministry: felipe.ministry?.name
    });

    // Verificar minist√©rio
    const ministry = felipe.masterMinistry || felipe.ministry;
    if (!ministry) {
      console.log('‚ùå Minist√©rio n√£o encontrado para o usu√°rio Felipe.');
      return;
    }

    console.log('‚úÖ Minist√©rio encontrado:', ministry.name);

    // Verificar atividades existentes
    const existingActivities = await prisma.atividade.findMany({
      where: {
        ministryId: ministry.id
      }
    });

    console.log(`üìä Atividades existentes: ${existingActivities.length}`);

    if (existingActivities.length === 0) {
      console.log('üîß Criando atividades de teste...');

      const atividades = [
        {
          tipo: 'MEMBRO',
          acao: 'CRIACAO',
          descricao: 'Novo membro cadastrado: Jo√£o Santos',
          detalhes: 'Membro adicionado ao minist√©rio Homens de Deus',
          usuarioId: felipe.id,
          ministryId: ministry.id,
          createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000) // 1 dia atr√°s
        },
        {
          tipo: 'GRUPO',
          acao: 'CRIACAO',
          descricao: 'Novo pequeno grupo criado: Grupo Alpha',
          detalhes: 'Pequeno grupo criado na regi√£o Norte',
          usuarioId: felipe.id,
          ministryId: ministry.id,
          createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000) // 2 dias atr√°s
        },
        {
          tipo: 'REUNIAO',
          acao: 'CRIACAO',
          descricao: 'Reuni√£o de lideran√ßa agendada',
          detalhes: 'Reuni√£o mensal de lideran√ßa do minist√©rio',
          usuarioId: felipe.id,
          ministryId: ministry.id,
          createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000) // 3 dias atr√°s
        },
        {
          tipo: 'EVENTO',
          acao: 'CRIACAO',
          descricao: 'Evento especial: Confer√™ncia de Homens',
          detalhes: 'Evento anual do minist√©rio Homens de Deus',
          usuarioId: felipe.id,
          ministryId: ministry.id,
          createdAt: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000) // 4 dias atr√°s
        },
        {
          tipo: 'FINANCEIRO',
          acao: 'CRIACAO',
          descricao: 'Nova entrada financeira registrada',
          detalhes: 'Oferta especial para o minist√©rio - R$ 500,00',
          usuarioId: felipe.id,
          ministryId: ministry.id,
          createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000) // 5 dias atr√°s
        },
        {
          tipo: 'SISTEMA',
          acao: 'LOGIN',
          descricao: 'Usu√°rio fez login no sistema',
          detalhes: 'Login realizado com sucesso',
          usuarioId: felipe.id,
          ministryId: ministry.id,
          createdAt: new Date(Date.now() - 6 * 60 * 60 * 1000) // 6 horas atr√°s
        }
      ];

      for (const atividade of atividades) {
        await prisma.atividade.create({ data: atividade });
        console.log(`‚úÖ Atividade criada: ${atividade.descricao}`);
      }

      console.log('üéâ Todas as atividades de teste foram criadas!');
    } else {
      console.log('‚ÑπÔ∏è Atividades j√° existem no banco de dados.');
      existingActivities.forEach((atividade, index) => {
        console.log(`${index + 1}. ${atividade.tipo} - ${atividade.acao}: ${atividade.descricao}`);
      });
    }

    // Verificar novamente ap√≥s cria√ß√£o
    const finalActivities = await prisma.atividade.findMany({
      where: {
        ministryId: ministry.id
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    console.log(`\nüìà Total de atividades no minist√©rio "${ministry.name}": ${finalActivities.length}`);

  } catch (error) {
    console.error('‚ùå Erro ao criar atividades de teste:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createTestActivities();